-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of
    {} -> c
    | BINOP(op) : insns -> case stack of
        x : y : stack -> eval([evalBinop(op, y, x) : stack, st, w], insns)
    esac
    | CONST(n) : insns -> eval([n : stack, st, w], insns)
    | READ : insns -> case readWorld(w) of
        [n, w] -> eval([n:stack, st, w], insns)
      esac
    | WRITE : insns -> case stack of
        n : stack -> eval([stack, st, writeWorld(n, w)], insns)
      esac
    | LD(x) : insns -> eval([st(x) : stack, st, w], insns)
    | ST(x) : insns -> case stack of
        n : stack -> eval([stack, st <- [x, n], w], insns)
      esac	
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  deepFlatten(doCompileExpr(expr))	
}
fun doCompileExpr (expr) {
  case expr of
    Const(n) -> singleton(CONST(n))
    | Var(x) -> singleton(LD(x))
    | Binop(op, l, r) -> {doCompileExpr(l), doCompileExpr(r), BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  deepFlatten(doCompileSM(stmt))
}

fun doCompileSM(stmt) {
  case stmt of
    Skip -> {}
    | Assn(x, e) -> {compileExpr(e), ST(x)}
    | Read(x) -> {READ, ST(x)}
    | Write(e) -> {compileExpr(e), WRITE}
    | Seq(s1, s2) -> {doCompileSM(s1), doCompileSM(s2)}
  esac
}
