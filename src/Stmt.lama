-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c@[s, w], stmt) {
  case stmt of
    Skip -> c
    | Assn(x, e) -> [s <- [x, evalExpr(s, e)], w]
    | Read(x) -> case readWorld(w) of 
        [n, neww] -> [s <- [x, n], neww]
      esac
    | Write(e) -> [s, writeWorld(evalExpr(s, e), w)]
    | Seq(s1, s2) -> eval(eval(c, s1), s2)
    | If(e, s1, s2) -> if evalExpr(s, e) != 0 then eval(c, s1) else eval(c, s2) fi
    | While(e, s1) -> if evalExpr(s, e) != 0 then eval(eval(c, s1), stmt) else c fi
    | Repeat(s1, e) -> case eval(c, s1) of
        nc@[ns, nw] -> if evalExpr(ns, e) != 0 then nc else eval(nc, stmt) fi
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
